#!/bin/bash
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

# Utility functions for Korora building.

#
# GENERAL
#

function is_root {
  [ "$(id -u)" -eq 0 ] && return 0

  return 1
}

function _machine_basearch {
  echo $(uname -m)
}


function _machine_releasever {
  echo $(lsb_release -r | awk '{print $2}')
}

function _machine_dist {
  case $(lsb_release -i | awk '{print $3}') in
    Fedora|fedora|Korora|korora|Kororaa|kororaa)
      echo "fedora"
      ;;
    *)
      echo "unknown"
  esac
}


#
# VERSION/USAGE
#

function version {
  _EXIT_VAL=${1:-0}

  echo "${SCRIPT} - v${VERSION}"
  echo
  echo "Member of the Korora Packaging Utility. Written by the kororaproject.org team."
  echo "Powered by freedom, dedication and the pursuit of perfection."
  echo
  echo "http://www.kororaproject.org"
  echo

  exit ${_EXIT_VAL}
}

#
# PRINT HANDLING
#

function _log {
  _MSG=${1:-""}

  if [ -w "${LOG_FILE}" ]
  then
    echo "L: ${_MSG}" >> ${LOG_FILE}
  fi
}

function _error {
  _MSG=${1:-""}

  echo "${_MSG}" >&2

  if [ -w "${LOG_FILE}" ]
  then
    echo "E: ${_MSG}" >> ${LOG_FILE}
  fi
}

function _warn {
  _MSG=${1:-""}

  echo "${_MSG}" >&2

  if [ -w "${LOG_FILE}" ]
  then
    echo "W: ${_MSG}" >> ${LOG_FILE}
  fi
}

function _info {
  _MSG=${1:-""}

  echo "${_MSG}" >&2

  if [ -w "${LOG_FILE}" ]
  then
    echo "I: ${_MSG}" >> ${LOG_FILE}
  fi
}

function _debug {
  _MSG=${1:-""}

  [ -z "${DEBUG}" ] && return 0

  echo "${_MSG}" >&2

  if [ -w "${LOG_FILE}" ]
  then
    echo "D: ${_MSG}" >> ${LOG_FILE}
  fi
}

#
# DIRECTORY HANDLING FUNCTIONS
#
function _mkdir {
  _DIR=${1:-}

  # ensure an valid name is given
  [ "x${_DIR}" == "x" ] && return 1
  [ "${_DIR}" == "." ] && return 1
  [ "${_DIR}" == ".." ] && return 1

  # check if directory already exists
  [ -d "${_DIR}" ] && return 0

  mkdir -p "${_DIR}"
}


function _pushd {
  _DIR=${1:-}

  # ensure directory exists
  [ -d "${_DIR}" ] || return 1

  # suppress pushd output
  pushd "${_DIR}" >/dev/null 2>&1
}

function _popd {
  # suppress pushd output
  popd >/dev/null 2>&1
}


#
# CONFIG HANDLING FUNCTIONS
#

function reset_config_variables {
  KP_NAME=
  KP_VERSION=
  KP_URL=
  KP_UPSTREAM_SRC_TYPE=
  KP_UPSTREAM_SRC_GIT_URL=
  KP_UPSTREAM_SRC_GIT_COMMIT=
  KP_UPSTREAM_SRC_SVN_URL=
  KP_UPSTREAM_SRC_SVN_REVISION=
  KP_UPSTREAM_SPEC=
  KP_BUILD_SPEC=
  KP_BUILD_SPEC_TEMPLATE=
  KP_BUILD_ARCH=
  KP_RELEASE_GIT_COMMIT=
}

function load_config {
  _PACKAGE=${1:-}

  if [ -z $_PACKAGE ]
  then
    _debug "No package specified for loading."
    return 1
  elif [ -r "${WORKING_DIR}/conf/packages.d/${_PACKAGE}" ]
  then
    _PACKAGE_CONF="${WORKING_DIR}/conf/packages.d/${_PACKAGE}"
  elif [ -r "${WORKING_DIR}/conf/packages.d/${_PACKAGE}.conf" ]
  then
    _PACKAGE_CONF="${WORKING_DIR}/conf/packages.d/${_PACKAGE}.conf"
  else
    _debug "Can't find configuration for ${_PACKAGE}"
    return 1
  fi

  # reset all available config variables
  reset_config_variables

  # source the config variables
  source "${_PACKAGE_CONF}"

  # TODO: validate the config
  # we need KP_NAME, KP_VERSION, KP_RELEASE, KP_URL, KP_BUILD_SPEC_TEMPLATE
  # KP_BUILD_ARCH as a minimum
  if [ -z "${KP_NAME}" ]
  then
    _error "KP_NAME is missing from ${_PACKAGE} config."
  elif [ -z "${KP_VERSION}" ]
  then
    _error "KP_VERSION is missing from ${_PACKAGE} config."
  elif [ -z "${KP_RELEASE}" ]
  then
    _error "KP_RELEASE is missing from ${_PACKAGE} config."
  elif [ -z "${KP_BUILD_SPEC}" -a -z "${KP_BUILD_SPEC_TEMPLATE}" ]
  then
    _error "KP_BUILD_SPEC or KP_BUILD_SPEC_TEMPLATE is missing from ${_PACKAGE} config."
  else
    return 0
  fi

  return 1
}

#
# string list_config_available(string packages)
#
# Returns a list of avilable Korora packages. An optional argument "package" can
# be supplied to filter the list.
#
# Note: assumes the package config has been sourced
#

function list_config_available {
  _PACKAGES=( ${1:-} )
  _FILES=

  for C in $(ls -1 ${WORKING_DIR}/conf/packages.d/kp-*.conf)
  do
    _FILE=$(basename $C)

    load_config ${_FILE} || continue

    if [ ${#_PACKAGES[@]} -eq 0 ]
    then
      _FILES="${_FILES} ${_FILE}"
    else
      for P in "${_PACKAGES[@]}"
      do
        if [ "${P}" == "${KP_NAME}" ]
        then
          _FILES="${_FILES} ${_FILE}"
        fi
      done
    fi
  done

  echo ${_FILES}
}

function check_config_pacakge {
  _FILE=${1:-}
  load_config ${_FILE} || return 1

  _pushd "${WORKING_PACKAGES_DIR}/${KP_NAME}" || return 1


}


#
# KICKSTART HANDLING FUNCTIONS
#


#
# string list_kickstart_available(string kickstarts)
#
# Returns a list of avilable Korora kickstart files. An optional argument "kickstarts" can
# be supplied to filter the list.
#

function list_kickstart_available {
  _KICKSTARTS=( ${1:-} )
  _FILES=

  if [ -d "${WORKING_DIR}/conf/kickstart.d/" ]
  then
    for K in $(ls -1 ${WORKING_DIR}/conf/kickstart.d/*.ks)
    do
      _FILE=$(basename "$K")
      _FILE=${_FILE%.ks}

      # skip if this is not requested
      if [ ${#_KICKSTARTS[@]} -eq 0 ]
      then
        _FILES="${_FILES} ${_FILE}"
      else
        for K in "${_KICKSTARTS[@]}"
        do
          if [ "${K}" == "${_FILE}" ]
          then
            _FILES="${_FILES} ${_FILE}"
          fi
        done
      fi
    done
  fi

  echo ${_FILES}
}

#
# SYNCRHONISATION FUNCTIONS
#

#
# expects a configuration file to be loaded and
# thus KP_NAME is valid
#
function get_sync_status {
  _USE_CACHE=${1:-}

  KP_PACKAGE_SYNC_STATE="-"
  KP_UPSTREAM_SYNC_STATE=" "

  if [ -z ${KP_NAME} ]
  then
    _error "No configuration file loaded (KP_NAME undefined). Unable to determine sync status."
    return 1
  elif [ -z ${KP_UPSTREAM_SRC_TYPE} ]
  then
    _error "No upstream type specified (KP_UPSTREAM_SRC_TYPE undefined)."
    return 1
  fi

  # sync requires the package directory to exist
  [ ! -d ${WORKING_PACKAGES_DIR}/${KP_NAME} ] && return 0

  _pushd "${WORKING_PACKAGES_DIR}/${KP_NAME}"

  KP_PACKAGE_SYNC_STATE="M"

  # commit/sync check
  _UNCOMMITED_CHANGES=$(git status -s | grep -v ^?? | wc -l)

  if [ ${_UNCOMMITED_CHANGES} -eq 0 ]
  then
    KP_PACKAGE_SYNC_STATE="S"
  fi

  _popd

  # sync requires the package upstream directory to sync
  [ ! -d "${WORKING_PACKAGES_DIR}/${KP_NAME}/upstream" ] && return 0

  _pushd "${WORKING_PACKAGES_DIR}/${KP_NAME}/upstream"

  # assume modified unless proven in sync
  KP_UPSTREAM_SYNC_STATE="M"

  # need to assess sync based on type
  if [ "${KP_UPSTREAM_SRC_TYPE}" == "git" ]
  then
    if [ -n "${_USE_CACHE}" ]
    then
      # update tree, fetching all branches and tags
      _debug "Updating all branches and tags from origin."
      _OUT=$(git fetch --all --tags 2>&1)
      if [ ${?} -ne 0 ]
      then
        _debug "${_OUT}"
      fi
    fi

    # commit/sync check
    _UNCOMMITED_CHANGES=$(git status -s | grep -v ^?? | wc -l)

    if [ "x${KP_UPSTREAM_SRC_GIT_COMMIT}" != "x" ]
    then
      # get the last commit and uncommit count
      _LATEST_COMMIT=$(git log --pretty=format:'%H' -n 1)
      _UPSTREAM_LOC=$(git log --pretty=format:'%H' | grep -n ${KP_UPSTREAM_SRC_GIT_COMMIT} | cut -d: -f1)

      if [ ${_UPSTREAM_LOC} -gt 1 ]
      then
        KP_UPSTREAM_SYNC_STATE="+"
      elif [ ${_UPSTREAM_LOC} -gt 1 ]
      then
        KP_UPSTREAM_SYNC_STATE="S"
      else
        KP_UPSTREAM_SYNC_STATE="?"
      fi
    elif [ ${_UNCOMMITED_CHANGES} -eq 0 ]
    then
      KP_UPSTREAM_SYNC_STATE="s"
    fi
  elif [ "${KP_UPSTREAM_SRC_TYPE}" == "svn" ]
  then
    _warn "TODO: implement SVN sync check."
  elif [ "${KP_UPSTREAM_SRC_TYPE}" == "local" ]
  then
    if [ -n "${_USE_CACHE}" ]
    then
      # update tree, fetching all branches and tags
      _debug "Updating all branches and tags from origin."
      _OUT=$(git fetch --all --tags 2>&1)
      if [ ${?} -ne 0 ]
      then
        _debug "${_OUT}"
      fi
    fi

    # commit/sync check
    _UNCOMMITED_CHANGES=$(git status -s | grep -v ^?? | wc -l)

    if [ "x${KP_RELEASE_GIT_COMMIT}" != "x" ]
    then
      # get the last commit and uncommit count
      _LATEST_COMMIT=$(git log --pretty=format:'%H' -n 1)
      _UPSTREAM_LOC=$(git log --pretty=format:'%H' | grep -n ${KP_RELEASE_GIT_COMMIT} | cut -d: -f1)

      if [ ${_UPSTREAM_LOC} -gt 1 ]
      then
        KP_UPSTREAM_SYNC_STATE="+"
      elif [ ${_UPSTREAM_LOC} -gt 1 ]
      then
        KP_UPSTREAM_SYNC_STATE="S"
      else
        KP_UPSTREAM_SYNC_STATE="?"
      fi
    elif [ ${_UNCOMMITED_CHANGES} -eq 0 ]
    then
      KP_UPSTREAM_SYNC_STATE="s"
    fi
  else
    _warn "Unknown upstream source type specified: ${KP_UPSTREAM_SRC_TYPE}"
  fi

  _popd
}




#
# BUILD FUNCTIONS
#


#
# RELEASE FUNCTIONS
#


