#!/bin/bash
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# INTIALISE
#
OPT_VERBOSE=
OPT_CHECKOUT_ONLY=
OPT_INTERACTIVE=
OPT_PUSH_AFTER_UPDATE=
OPT_RESET=
OPT_FORCE_REMOTE_FETCH=
OPT_FORCE_LOCAL_VERSION=
OPT_CACHE=
OPT_INCLUDE_DEPRACATED=

#
# FUNCTIONS
#
function usage {
  _EXIT_VAL=${1:-0}

  cat << EOF
Usage: $0 sync [-v]

Options:
  -C   Use cached version of upstream configuration information
  -v   Show verbose output
  -?   Show this usage
  -V   Show version
  -i   Interactive
  -p   Push updates

Long Options:
  --cache                Same as -C
  --force-remote-fetch   Force a sync with remote upsteam
  --force-local-version  Force the configuration to be updated based on local versions
  --interactive          Same as -i
  --push-updates         Same as -p
  --include-depracated  Include deprecated packages
  --verbose              Same as -v
  --help                 Same as -?
  --version              Same as -V

EOF

  exit ${_EXIT_VAL};
}



#
# PARSE COMMAND LINE
#

function parse_args {
  CMD_LINE=$(getopt -n$0 -u --longoptions="cache reset force-remote-fetch force-local-version include-depracated verbose version help interactive push-updates" "C v V ? i p" $@)
  [ ${?} -ne 0 ] && usage 1

  set -- ${CMD_LINE}

  while [ $# -gt 0 ]
  do
    case "$1" in
      -C|--cache)
        OPT_CACHE=1
        ;;
      --reset)
        OPT_RESET=1
        ;;
      --force-remote-fetch)
        OPT_FORCE_REMOTE_FETCH=1
        ;;
      --force-local-version)
        OPT_FORCE_LOCAL_VERSION=1
        ;;
      -i|--interactive)
        OPT_INTERACTIVE=1
        ;;
      -p|--push-updates)
        OPT_PUSH_UPDATES=1
        ;;
      --include-depracated)
        OPT_INCLUDE_DEPRACATED=1
        ;;
      -v|--verbose)
        OPT_VERBOSE=1
        ;;
      -V|--version)
        version 0
        ;;
      --help)
        usage 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        usage 1
        ;;
      *)
        break
    esac
    shift
  done

  # remaining arguments are packages
  PACKAGES=""
  if [ $# -eq 0 ]
  then
    echo "Syncing all packages ..."
  else
    while [ $# -gt 0 ]
    do
      PACKAGES="${PACKAGES} $1"
      shift
    done
  fi
}


#
# MAIN
#

function main {
  list_config_validate "${PACKAGES}"
  if [ ${?} -gt 0 ]
  then

    # check that we have packages to sync
    if [ -z "$(ls -A ${WORKING_PACKSES_DIR})" ]
    then
      _error "There are no packages checked out. Try kp --checkout."
      return 1
    fi

    # synchronise package cache first
    if [ "${OPT_CACHE}" != "1" ]
    then
      _info "Synchronising upstream configuration information ..."

      _pushd "${WORKING_DIR}/conf"

      if [ "${OPT_RESET}" == "1" ]
      then
        git reset --hard
      fi

      git remote update >/dev/null 2>&1

      _LOCAL_HEAD=$(git log --pretty=format:'%H' -n 1 master)
      _REMOTE_HEAD=$(git log --pretty=format:'%H' -n 1 origin/master)

      _RL_COMMIT_LOC=$(($(git log --pretty=format:'%H' origin/master | grep -n ${_LOCAL_HEAD} | cut -d: -f1)-1))
      _LR_COMMIT_LOC=$(($(git log --pretty=format:'%H' master | grep -n ${_REMOTE_HEAD} | cut -d: -f1)-1))

      [ ${_LR_COMMIT_LOC} -le 0 ] && _LR_DELTA=0 || _LR_DELTA="+${_LR_COMMIT_LOC}"
      [ ${_RL_COMMIT_LOC} -le 0 ] && _RL_DELTA=0 || _RL_DELTA="+${_RL_COMMIT_LOC}"

      _info " - L:${_LOCAL_HEAD} (${_LR_DELTA}-${_RL_DELTA}) R:${_REMOTE_HEAD}"

      if [ ${_RL_DELTA} -gt 0 ]
      then
        _info "Pulling upstream changes ..."
        git pull --rebase || exit 1
      fi

      if [ ${_LR_DELTA} -gt 0 ]
      then
        _info "Pushing local changes upstream ..."
        git push --all origin || exit 1
      fi

      _popd
    fi

    # process each package for sync
    for F in $(list_config_available "${PACKAGES}")
    do
      # load the configuration
      load_config ${F} || continue

      # check for package deprecation, skip unless we're including them
      if [ "${KP_DEPRACATED}" == "yes" -a "${OPT_INCLUDE_DEPRACATED}" != "1" ]
      then
        _debug "Skipping depracated package: ${KP_NAME}"
        continue
      fi

      get_sync_status || continue

      # ignore non-checked out sources
      [ "${KP_PACKAGE_SYNC_STATE}" == "-" ] && continue

      _info "Syncing: ${KP_NAME}"

      # move to local working dir
      _pushd "${WORKING_PACKAGES_DIR}/${KP_NAME}"

      if [ "${OPT_RESET}" == "1" ]
      then
        git reset --hard
      fi

      # check package version with spec
      get_spec_version "build/${KP_BUILD_SPEC}"

      _R_VER="${KP_VERSION}-${KP_RELEASE}"
      _L_VER="${_SPEC_VERSION}-${_SPEC_RELEASE}"

      # calculate the version mismatch
      _MASTER="L"
      [ "${_R_VER}" \> "${_L_VER}" ] && _MASTER="R"
      [ "${_R_VER}" == "${_L_VER}" ] && _MASTER="-"

      _info "M: ${_MASTER} (L:${_L_VER} R:${_R_VER})"

      # calculate the local/heads head
      _LOCAL_HEAD=$(git log --pretty=format:'%H' -n 1 master)
      _REMOTE_HEAD=$(git log --pretty=format:'%H' -n 1 origin/master)

      # remote and local differ so let's fetch and assess
      if [ "${_MASTER}" != "-" -o "${_LOCAL_HEAD}" != "${_REMOTE_HEAD}" -o "${OPT_FORCE_REMOTE_FETCH}" == "1" ]
      then
        _info "Updating ..."

        git remote update >/dev/null 2>&1

        # calculate the remote head
        _REMOTE_HEAD=$(git log --pretty=format:'%H' -n 1 origin/master)

        _RL_COMMIT_LOC=$(($(git log --pretty=format:'%H' origin/master | grep -n ${_LOCAL_HEAD} | cut -d: -f1)-1))
        _LR_COMMIT_LOC=$(($(git log --pretty=format:'%H' master | grep -n ${_REMOTE_HEAD} | cut -d: -f1)-1))

        [ ${_LR_COMMIT_LOC} -le 0 ] && _LR_DELTA=0 || _LR_DELTA="+${_LR_COMMIT_LOC}"
        [ ${_RL_COMMIT_LOC} -le 0 ] && _RL_DELTA=0 || _RL_DELTA="+${_RL_COMMIT_LOC}"

        _info " - L:${_LOCAL_HEAD} (${_LR_DELTA}-${_RL_DELTA}) R:${_REMOTE_HEAD}"

        if [ ${_RL_DELTA} -gt 0 ]
        then
          _info "Pulling upstream changes ..."
          git pull --rebase || exit 1
        fi

        if [ ${_LR_DELTA} -gt 0 ]
        then
          _info "Pushing local changes upstream ..."
          git push --all origin || exit 1
        fi

        # recalculate local head
        _LOCAL_HEAD=$(git log --pretty=format:'%H' -n 1 master)

        # recalculate version matches
        _R_VER="${KP_VERSION}-${KP_RELEASE}"

        _MASTER="L"
        [ "${_R_VER}" \> "${_L_VER}" ] && _MASTER="R"
        [ "${_R_VER}" == "${_L_VER}" ] && _MASTER="-"
      fi

      # local is ahead so update the configuration information
      if [ "${_MASTER}" == "L" ] || [ "${_MASTER}" != "-" -a "${OPT_FORCE_LOCAL_VERSION}" == "1" ]
      then
        _VERBOSE_FORCE=
        [ "${OPT_FORCE_LOCAL_VERSION}" == "1" ] && _VERBOSE_FORCE=" (forced)"
        _info "Updating upstream configuration information${_VERBOSE_FORCE} ..."

        _pushd "${WORKING_DIR}/conf/"

        sed -i -e "s/^KP_VERSION=.*/KP_VERSION=${_SPEC_VERSION}/" \
               -e "s/^KP_RELEASE=.*/KP_RELEASE=${_SPEC_RELEASE}/" \
               -e "s/^KP_RELEASE_GIT_COMMIT=.*/KP_RELEASE_GIT_COMMIT=${_LOCAL_HEAD}/" \
               "packages.d/${F}"

        git add "packages.d/${F}"
        git commit -m "updated: version bump for ${KP_NAME} ${_VERBOSE_FORCE}"
        git push --all origin

        _popd
      fi

      _info "Up to date."
      echo

      _popd
    done

    _info "Completed."
  fi
}
