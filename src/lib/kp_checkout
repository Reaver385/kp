#!/bin/bash
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# INTIALISE
#
OPT_VERBOSE=
OPT_CHECKOUT_ONLY=
OPT_UPSTREAM=1


#
# PRIVATE FUNCTIONS
#

#
# int package_upstream_checkout(void)
#
# Performs a checkout of a Korora package's upstream into respective upstream
# package directory.
#
# Note: assumes the package config has been sourced
#

function _package_upstream_checkout {

  if [ -z ${KP_NAME} ]
  then
    _error "No configuration file loaded (KP_NAME undefined). Unable to checkout package."
    return 1
  elif [ -z ${KP_UPSTREAM_SRC_TYPE} ]
  then
    _error "No upstream type specified (KP_UPSTREAM_SRC_TYPE undefined)."
    return 1
  fi

  _UPSTREAM_DIR="${WORKING_PACKAGES_DIR}/${KP_NAME}/upstream"


  # need to assess checkout based on type
  if [ "${KP_UPSTREAM_SRC_TYPE}" == "git" ]
  then
    _mkdir "${_UPSTREAM_DIR}"

    # check if we have a checkout already
    if [ ! -d "${UPSTREAM_DIR}/.git" ]
    then
      # update tree, fetching all branches and tags
      _debug "Cloning upstream : ${KP_UPSTREAM_SRC_URL}"
      _OUT=$(git clone ${KP_UPSTREAM_SRC_URL} ${WORKING_PACKAGES_DIR}/${KP_NAME}/upstream)
      if [ ${?} -ne 0 ]
      then
        _debug "${_OUT}"
      fi
    fi

    _warn "TODO: implement git sync check"
  elif [ "${KP_UPSTREAM_SRC_TYPE}" == "svn" ]
  then
    _mkdir "${_UPSTREAM_DIR}"
    _warn "TODO: implement SVN sync check."
  elif [ "${KP_UPSTREAM_SRC_TYPE}" == "local" ]
  then
    _debug "Upstream already available in local package."
  elif [ "${KP_UPSTREAM_SRC_TYPE}" == "binary" ]
  then
    _debug "Upstream not available for binary package types."
  elif [ "${KP_UPSTREAM_SRC_TYPE}" == "bare" ]
  then
    _debug "Upstream not available for bare package types."
  else
    _warn "Unknown upstream source type specified: ${KP_UPSTREAM_SRC_TYPE}"
  fi

  return 0
}

#
# int package_checkout(void)
#
# Performs a checkout of a Korora package into the working directory.
#
# Note: assumes the package config has been sourced
#
function _package_checkout {
  if [ -z ${KP_NAME} ]
  then
    _error "No configuration file loaded (KP_NAME undefined). Unable to checkout package."
    return 1
  fi

  _WORKING_PATH="${WORKING_PACKAGES_DIR}/${KP_NAME}"

  # check if destination path already exists
  if [ -d "${_WORKING_PATH}" ]
  then
    _debug "Project path already exists: ${_WORKING_PATH}"
    return 0
  fi

  _debug "Creating package path: ${_WORKING_PATH}"

  if ! mkdir -p ${_WORKING_PATH}
  then
    _error "Unable to create package path: ${_WORKING_PATH}"
    return 1
  fi

  # update tree, fetching all branches and tags
  _debug "Cloning from: ${KP_URL}"

  _OUT=$(git clone ${KP_URL} ${_WORKING_PATH})
  if [ ${?} -ne 0 ]
  then
    _error "Unable to clone package."
    return 1
  fi

  _warn "TODO: implement commit check"

  # get the last commit and uncommit count
  _LATEST_COMMIT=$(git log --pretty=format:'%H' -n 1)
  _UNCOMMITED_CHANGES=$(git status -s | wc -l)
  return 0
}

#
# FUNCTIONS
#
function usage {
  _EXIT_VAL=${1:-0}

  cat << EOF
  Usage: $0 [-v] package1 package2 ... packageN

  Options:
    -n   Don't checkout the upstream source
    -v   Show verbose output
    -?   Show this usage
    -V   Show version

  Long Options:
    --no-upstream  Same as -n
    --verbose      Same as -v
    --help         Same as -?
    --version      Same as -V

EOF

  exit ${_EXIT_VAL};
}

#
# PARSE COMMAND LINE
#

function parse_args {
  CMD_LINE=$(getopt -n$0 -u --longoptions="no-upstream verbose version help" "n v V ?" $@)
  [ ${?} -ne 0 ] && usage 1

  set -- ${CMD_LINE}

  while [ $# -gt 0 ]
  do
    case "$1" in
      -U|--upstream)
        OPT_UPSTREAM=
        ;;
      -v|--verbose)
        OPT_VERBOSE=1
        ;;
      -V|--version)
        version 0
        ;;
      -h|--help)
        usage 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        usage 1
        ;;
      *)
        break
    esac
    shift
  done

  # remaining arguments are packages
  PACKAGES=
  if [ $# -eq 0 ]
  then
    echo "Checking out all package ..."
  else
    while [ $# -gt 0 ]
    do
      PACKAGES="${PACKAGES} $1"
      shift
    done
  fi
}

#
# MAIN
#

function main {
  # load the configuration
  for F in $(list_config_available "${PACKAGES}")
  do
    load_config ${F}

    # start the checkout
    echo "Checking out: ${KP_NAME}"

    # grab the korora package
    _package_checkout || continue

    # grab the relevant upstream source
    if [ -n "${OPT_UPSTREAM}" ]
    then
      _package_upstream_checkout
    fi
  done
}

