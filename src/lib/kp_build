#!/bin/bash
#
# Copyright 2012 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# BUILD
#
OPT_VERBOSE=

dist=fedora
releasever=17
basearch=x86_64


#
# FUNCTIONS
#
function usage {
  _EXIT_VAL=${1:-0}

  cat << EOF
  Usage: $0 [-vc]

  Options:
    -v   Show verbose output
    -?   Show this usage
    -V   Show version

  Long Options:
    --verbose     Same as -v
    --help        Same as -?
    --version     Same as -V

EOF

  exit ${_EXIT_VAL};
}

#
# PARSE COMMAND LINE
#

function parse_args {
  CMD_LINE=$(getopt -n$0 -u --longoptions="verbose version help" "v V ?" $@)
  [ ${?} -ne 0 ] && usage 1

  set -- ${CMD_LINE}

  while [ $# -gt 0 ]
  do
    case "$1" in
      -v|--verbose)
        OPT_VERBOSE=1
        ;;
      -V|--version)
        version 0
        ;;
      -h|--help)
        usage 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        usage 1
        ;;
      *)
        break
    esac
    shift
  done

  # remaining arguments are packages
  PACKAGES=""
  if [ $# -eq 0 ]
  then
    echo "Building all packages ..."
  else
    while [ $# -gt 0 ]
    do
      PACKAGES="${PACKAGES} $1"
      shift
    done
  fi

  echo "PACKAGES INIT = $PACKAGES"
}

function check_upstream {
  echo "check_upstream"
  if [ -d ${WORKING_PACKAGES_DIR}/$KP_NAME/upstream ]
  then
    echo "do git rebase stuff"
    echo "copy patches to  ${WORKING_PACKAGES_DIR}/$KP_NAME/build/sources/"
  fi
}

function initialise_mock {
  _debug "Initialising mock build environment.."
  mock --root $dist-$releasever-$basearch --clean
  mock --root $dist-$releasever-$basearch --init
}

function generate_spec {
  cd ${WORKING_PACKAGES_DIR}/$KP_NAME/build/
  echo -e "\n\ngenerate_spec from template, sed stuff, etc"
  cd -
}

function gather_source {
  _debug "Gathering source..."
  cd ${WORKING_PACKAGES_DIR}/$KP_NAME/build/
  case ${KP_UPSTREAM_SRC_TYPE} in
  binary)
    spectool -g $KP_NAME.spec
    ;;
  esac
  #am i local repo?
  #  git archive sha hash
  #am I spec file tarball?
  #do I have any patches
  #echo "(we might have patches from upstream, or patches from git repo, need source tarball)"
  cd -
}

function mock_build {
  cd ${WORKING_PACKAGES_DIR}/$KP_NAME/build/

  _debug "Building source package, please wait.."
  mock --root $dist-$releasever-$basearch --buildsrpm --spec $KP_NAME.spec --sources . || _error "Could not create source package, skipping package"

  _debug "Building package, please wait.."
  # --no-clean because we have srpm in there, else need to copy out (and build should be clean anyway)
  mock --no-clean --root $dist-$releasever-$basearch --rebuild /var/lib/mock/$dist-$releasever-$basearch/result/$(basename $(grep ^Wrote /var/lib/mock/$dist-$releasever-$basearch/result/build.log |grep src.rpm |awk {'print $2'} |uniq)) || _error "Could not build package, skipping"

  cd -
  _debug "Copying packages to ${WORKING_PACKAGES_DIR}/$KP_NAME/release/"
  mkdir -p ${WORKING_PACKAGES_DIR}/$KP_NAME/release
  for x in $(grep ^Wrote /var/lib/mock/$dist-$releasever-$basearch/result/build.log |awk {'print $2'} |uniq)
  do
    x=$(basename $x)
    cp -f /var/lib/mock/$dist-$releasever-$basearch/result/$x ${WORKING_PACKAGES_DIR}/$KP_NAME/release/
  done
  cd -
}

#
# MAIN
#

function main {
  #create rpmbuild env
#  rpmdev-setuptree || _error "Could not create rpmbuild environment, exiting" ; exit 1

  # load the configuration
  for F in $(list_config_available)
  do
    load_config ${F}
    [ ${?} -ne 0 ] && continue

    # skip if this is not requested
    if [ -n "${PACKAGES}" ]
    then
      echo ${PACKAGES} | grep -q ${KP_NAME} || continue
    fi

    echo "KP_NAME = $KP_NAME"
    echo "KP_VERSION = $KP_VERSION"
    echo "KP_URL = $KP_URL"
    echo "KP_UPSTREAM_SRC_TYPE = $KP_UPSTREAM_SRC_TYPE"
    echo "KP_UPSTREAM_SRC_URL = $KP_UPSTREAM_SRC_URL"
    echo "BUILD_SPEC = $BUILD_SPEC"
    echo "KP_RELEASE_GIT_COMMIT = $KP_RELEASE_GIT_COMMIT"

    echo ${CMD_LINE}

    if [ ! -d ${WORKING_PACKAGES_DIR}/$KP_NAME ]
    then
       # || _error "No checkout done, skipping" ; continue
       _error "No checkout done, skipping" ; continue
    fi

    [ "${KP_UPSTREAM_SRC_TYPE}" == upstream ] && check_upstream ${F}

    initialise_mock
    generate_spec ${F}
    gather_source ${F}
    mock_build ${F}
     
  done
}
