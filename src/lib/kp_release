#!/bin/bash
#
# Copyright 2012 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# INTIALISE
#
OPT_VERBOSE=
OPT_LIST=
OPT_USB=
OPT_ISO=1


OPT_RELEASE_VERSION=17
OPT_RELEASE_CODENAME="Bubbles"
OPT_RELEASE_BASEARCH="x86_64"

#
# PRIVATE FUNCTIONS
#

function _template_inflate {
  _IN_FILE=${1}
  _OUT_FILE=${2}

  # substitute variables
  sed -i "s@%%KP_KICKSTART_DIR%%@${CONFIG_DIR}/kickstart.d@g" ${_IN_FILE}
  sed -i "s@%%KP_REPOSITORY_DIR%%@${WORKING_DIR}/repository@g" ${_IN_FILE}
  sed -i "s@%%KP_BASEARCH%%@${OPT_RELEASE_BASEARCH}@g" ${_IN_FILE}
  sed -i "s@%%KP_VERSION%%@${OPT_RELEASE_VERSION}@g" ${_IN_FILE}
}

#
# FUNCTIONS
#

function usage {
  _EXIT_VAL=${1:-0}

  cat << EOF
Usage: $0 release [options]

Options:
  -l   List available kickstarts to build
  -t   Set the release title
  -r   Set the release version
  -n   Set the release codename
  -v   Show verbose output
  -?   Show this usage
  -V   Show version

Long Options:
  --list              Same as -l
  --release-title     Same as -t
  --release-version   Same as -r
  --release-codename  Same as -n
  --verbose           Same as -v
  --help              Same as -?
  --version           Same as -V

EOF

  exit ${_EXIT_VAL};
}

#
# PARSE COMMAND LINE
#

function parse_args {
  CMD_LINE=$(getopt -n$0 -u --longoptions="list iso usb verbose version help" "l v V ?" $@)
  [ ${?} -ne 0 ] && usage 1

  set -- ${CMD_LINE}

  while [ $# -gt 0 ]
  do
    case "$1" in
      -l|--list)
        OPT_LIST=1
        ;;
      -v|--verbose)
        OPT_VERBOSE=1
        ;;
      -V|--version)
        version 0
        ;;
      --help)
        usage 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        usage 1
        ;;
      *)
        break
    esac
    shift
  done

  # remaining arguments are releases
  RELEASES=
  if [ $# -eq 0 ]
  then
    echo "Building all releases ..."
  else
    while [ $# -gt 0 ]
    do
      RELEASES="${RELEASES} $1"
      shift
    done
  fi
}


#
# MAIN
#

function main {
  # check if we're listing
  if [ -n "${OPT_LIST}" ]
  then
    _info "Korora Releases:"
    for L in $(list_kickstart_available)
    do
      _info "  - ${L}"

    done
  # otherwise we must be building
  else
    _VERBOSE=

    if [ ${OPT_VERBOSE} -eq 1 ]
    then
      _VERBOSE="--version"
    fi

    # build all requested releases
    for R in $(list_kickstart_available "${RELEASES}")
    do

      #
      _info "Preparing to build: $R"
      _info "  - Codename:     ${OPT_RELEASE_CODENAME}"
      _info "  - Version:      ${OPT_RELEASE_VERSION}"
      _info "  - Architecture: ${OPT_RELEASE_BASEARCH}"

      # create working directory
      _info "Preparing release template: ${WORKING_DIR}"

      _TEMPLATE="/tmp/${R}.${RANDOM}"

      #
      cp "${CONFIG_DIR}/kickstart.d/${R}.ks" "${_TEMPLATE}"
      _template_inflate "${_TEMPLATE}"

      # create the CD
      livecd-creator ${_VEBOSE} --config="${_TEMPLATE}" --fslabel="korora-${OPT_RELEASE_VERSION}-live" --title="Korora ${OPT_RELEASE_VERSION}" --product="Korora ${OPT_RELEASE_VERSION} (${OPT_RELEASE_CODENAME})" -cache=${WORKING_RELEASE_CACHE_DIR} --tmpdir ${WORKING_RELEASE_TMP_DIR}

      # clean up our inflated template file
      rm -f "${_TEMPLATE}"
    done
  fi
}

