#!/bin/bash
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#
# INTIALISE
#
OPT_VERBOSE=
OPT_CHECKOUT_ONLY=
OPT_INTERACTIVE=
OPT_PUSH_AFTER_UPDATE=


#
# FUNCTIONS
#
function usage {
  _EXIT_VAL=${1:-0}

  cat << EOF
Usage: $0 sync [-v]

Options:
  -v   Show verbose output
  -?   Show this usage
  -V   Show version
  -i   Interactive
  -p   Push updates

Long Options:
  --interactive   Same as -i
  --push-updates  Same as -p
  --verbose       Same as -v
  --help          Same as -?
  --version       Same as -V

EOF

  exit ${_EXIT_VAL};
}

#
# PARSE COMMAND LINE
#

function parse_args {
  CMD_LINE=$(getopt -n$0 -u --longoptions="verbose version help interactive push-updates" "v V ? i p" $@)
  [ ${?} -ne 0 ] && usage 1

  set -- ${CMD_LINE}

  while [ $# -gt 0 ]
  do
    case "$1" in
      -i|--interactive)
        OPT_INTERACTIVE=1
        ;;
      -p|--push-updates)
        OPT_PUSH_UPDATES=1
        ;;
      -v|--verbose)
        OPT_VERBOSE=1
        ;;
      -V|--version)
        version 0
        ;;
      --help)
        usage 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        usage 1
        ;;
      *)
        break
    esac
    shift
  done

  # remaining arguments are packages
  PACKAGES=""
  if [ $# -eq 0 ]
  then
    echo "Syncing all packages ..."
  else
    while [ $# -gt 0 ]
    do
      PACKAGES="${PACKAGES} $1"
      shift
    done
  fi
}


#
# MAIN
#

function main {
  # synchronise package cache first
  _info "Synchronising upstream configuration information ..."

  _pushd "${WORKING_DIR}/conf"
  git remote update >/dev/null 2>&1

  _LOCAL_HEAD=$(git log --pretty=format:'%H' -n 1 master)
  _REMOTE_HEAD=$(git log --pretty=format:'%H' -n 1 origin/master)

  _RL_COMMIT_LOC=$(($(git log --pretty=format:'%H' origin/master | grep -n ${_LOCAL_HEAD} | cut -d: -f1)-1))
  _LR_COMMIT_LOC=$(($(git log --pretty=format:'%H' master | grep -n ${_REMOTE_HEAD} | cut -d: -f1)-1))

  [ ${_LR_COMMIT_LOC} -le 0 ] && _LR_DELTA=0 || _LR_DELTA="+${_LR_COMMIT_LOC}"
  [ ${_RL_COMMIT_LOC} -le 0 ] && _RL_DELTA=0 || _RL_DELTA="+${_RL_COMMIT_LOC}"

  _info " - L:${_LOCAL_HEAD} (${_LR_DELTA}-${_RL_DELTA}) R:${_REMOTE_HEAD}"

  if [ ${_RL_DELTA} -gt 0 ]
  then
    _info "Pulling upstream changes ..."
    git pull --rebase || exit 1
  fi

  if [ ${_LR_DELTA} -gt 0 ]
  then
    _info "Pushing local changes upstream ..."
    git push origin master || exit 1
  fi

  _popd


  # process each package
  for F in $(list_config_available "${PACKAGES}")
  do
    # load the configuration
    load_config ${F} || continue

    get_sync_status || continue

    echo $F

    _info "Syncing: ${KP_NAME}"

    # ignore non-checked out sources
    if [ "${KP_PACKAGE_SYNC_STATE}" == "-" ]
    then
      _debug "Not checked out, ignoring."
      continue
    fi

    # move to local working dir
    _pushd "${WORKING_PACKAGES_DIR}/${KP_NAME}"

    # check package version with spec
    _SPEC_VERSION=$(awk '/^Version:/ { print $2 }' "build/${KP_BUILD_SPEC}")
    _SPEC_RELEASE=$(awk '/^Release:/ { print $2 }' "build/${KP_BUILD_SPEC}" | sed -r 's/%\{\?dist\}(.*)/\1/')

    _R_VER="${KP_VERSION}-${KP_RELEASE}"
    _L_VER="${_SPEC_VERSION}-${_SPEC_RELEASE}"

    # calculate the version mismatch
    if [ "${_R_VER}" \> "${_L_VER}" ]
    then
      _MASTER="R"
    elif [ "${_R_VER}" == "${_L_VER}" ]
    then
      _MASTER="-"
    else
      _MASTER="L"
    fi

    _info "M: ${_MASTER} (L:${_L_VER} R:${_R_VER})"

    # remote and local differ so let's fetch and assess
    if [ "${_MASTER}" != "-" ]
    then
      _info "Updating ..."

      git remote update >/dev/null 2>&1

      _LOCAL_HEAD=$(git log --pretty=format:'%H' -n 1 master)
      _REMOTE_HEAD=$(git log --pretty=format:'%H' -n 1 origin/master)

      _RL_COMMIT_LOC=$(($(git log --pretty=format:'%H' origin/master | grep -n ${_LOCAL_HEAD} | cut -d: -f1)-1))
      _LR_COMMIT_LOC=$(($(git log --pretty=format:'%H' master | grep -n ${_REMOTE_HEAD} | cut -d: -f1)-1))

      [ ${_LR_COMMIT_LOC} -le 0 ] && _LR_DELTA=0 || _LR_DELTA="+${_LR_COMMIT_LOC}"
      [ ${_RL_COMMIT_LOC} -le 0 ] && _RL_DELTA=0 || _RL_DELTA="+${_RL_COMMIT_LOC}"

      _info " - L:${_LOCAL_HEAD} (${_LR_DELTA}-${_RL_DELTA}) R:${_REMOTE_HEAD}"

      if [ ${_RL_DELTA} -gt 0 ]
      then
        _info "Pulling upstream changes ..."
        git pull --rebase || exit 1
      fi

      if [ ${_LR_DELTA} -gt 0 ]
      then
        _info "Pushing local changes upstream ..."
        git push origin master || exit 1
      fi
    fi

    # local is ahead so update the configuration information
    if [ "${_MASTER}" == "L" ]
    then
      _info "Updating upstream configuration information ..."

      _pushd "${WORKING_DIR}/conf/"

      sed -e "s/^KP_VERSION=.*/KP_VERSION=${_SPEC_VERSION}/" \
          -e "s/^KP_RELEASE=.*/KP_RELEASE=${_SPEC_RELEASE}/" \
          -e "s/^KP_RELEASE_GIT_COMMIT=.*/KP_RELEASE_GIT_COMMIT=TBD" \
          "packages.d/$F"

      echo git commit -m "updated: version bumps for ${KP_NAME}"
      echo git push origin master

      _popd
    fi

    _info "Up to date."

    _popd
  done
}
